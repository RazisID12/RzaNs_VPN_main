-- Knot DNS Resolver configuration in -*- lua -*-
-- Refer to manual: https://www.knot-resolver.cz/documentation/stable

-- upstreams chosen via settings.yaml → generated by settings.sh as:
--   /etc/knot-resolver/upstream_dns.lua
--     return {
--       ipv4 = {'<IPv4a>','<IPv4b>'},
--       ipv6 = {'<IPv6a>','<IPv6b>'},
--       dot = 'tls://<hostname>',
--       port_tls = 853
--     }
local systemd_instance = os.getenv("SYSTEMD_INSTANCE") or ''
local ok, ups = pcall(dofile, '/etc/knot-resolver/upstream_dns.lua')
if not ok or type(ups) ~= 'table' then
  panic('upstream_dns.lua is missing or invalid; run settings.sh --apply-upstream')
end
if (not ups.ipv4 or #ups.ipv4 == 0) and (not ups.ipv6 or #ups.ipv6 == 0) then
  panic('upstream list is empty in upstream_dns.lua')
end
if not ups.dot or not ups.port_tls then
  panic('dot/port_tls not set in upstream_dns.lua')
end
-- derive SNI hostname from dot URL (strip 'tls://')
local tls_host = tostring(ups.dot):gsub('^tls://', '')
local tls_port = tonumber(ups.port_tls) or 853
if tls_host == '' then panic('invalid dot in upstream_dns.lua') end

-- helper для фильтрации типов (AAAA/HTTPS/SVCB)
local function match_query_type(action, target_qtype)
  return function (state, query)
    if query.stype == target_qtype then
      return action
    else
      return nil
    end
  end
end

if string.match(systemd_instance, '^1') then
  -- @1: DoT-хаб (v4+v6), БЕЗ валидации; остальные инстансы форвардят сюда
  net.listen('127.0.0.1', 53, { kind = 'dns', freebind = true })
  net.listen('::1',       53, { kind = 'dns', freebind = true })
  user('knot-resolver', 'knot-resolver')
  -- небольшой кэш для @1
  cache.open( 96 * MB, 'lmdb:///var/cache/knot-resolver/1')
  modules = { 'hints > iterate', 'stats' }
  net.bufsize(1232)
  net.ipv6 = true
  -- DoT к провайдеру из ups (dot/port_tls приходят из upstream_dns.lua)
  local up = {}
  local function add_tls(addr)
    table.insert(up, { addr .. '@' .. tls_port, hostname = tls_host })
  end
  for _,v in ipairs(ups.ipv4 or {}) do add_tls(v) end
  for _,v in ipairs(ups.ipv6 or {}) do add_tls(v) end
  policy.add(policy.all(policy.TLS_FORWARD(up)))

elseif string.match(systemd_instance, '^2') then
  -- @2: СИСТЕМНЫЙ резолвер сервера (v4+v6), БЕЗ валидации → форвардит в @1 (DoT-хаб)
  net.listen('127.0.0.2', 53, { kind = 'dns', freebind = true })
  net.listen('::2',       53, { kind = 'dns', freebind = true })
  user('knot-resolver', 'knot-resolver')
  cache.open(256 * MB, 'lmdb:///var/cache/knot-resolver/2')
  modules = { 'hints > iterate', 'stats' }
  net.bufsize(1232)
  net.ipv6 = true
  policy.add(policy.all(policy.FORWARD({'127.0.0.1@53'})))

elseif string.match(systemd_instance, '^3') then
  -- @3: SPLIT (со списками), ТОЛЬКО IPv4 → RPZ/фильтры; форвард в @1
  net.listen('127.0.0.3', 53, { kind = 'dns', freebind = true })
  user('knot-resolver', 'knot-resolver')
  cache.open(512 * MB, 'lmdb:///var/cache/knot-resolver/3')
  modules = { 'hints > iterate', 'stats', 'predict' }
  net.bufsize(1232)
  net.ipv6 = false
  -- отключаем DNSSEC/EDNS к апстримам
  trust_anchors.remove('.')
  modules.unload('validate'); modules.unload('ta_update')
  modules.unload('ta_signal_query'); modules.unload('ta_sentinel')
  modules.unload('detect_time_skew')
  modules.unload('extended_error'); modules.unload('priming')
  modules.unload('edns_keepalive'); modules.unload('detect_time_jump')
  policy.add(policy.all(policy.FLAGS({'NO_EDNS'})))
  -- «только v4» → пустой ответ на AAAA/HTTPS/SVCB
  policy.add(match_query_type(policy.ANSWER({}, true), kres.type.AAAA))
  policy.add(match_query_type(policy.ANSWER({}, true), kres.type.HTTPS))
  policy.add(match_query_type(policy.ANSWER({}, true), kres.type.SVCB))
  -- RPZ для @3: списки/прокси (proxy.py на 127.0.0.5)
  policy.add(policy.rpz(policy.STUB('127.0.0.5'), '/etc/knot-resolver/proxy.rpz', true))
  -- альтернативные зоны (OpenNIC/Emercoin/Namecoin)
  policy.add(
    policy.suffix(
      policy.FORWARD({'51.158.108.203','66.103.201.196','95.216.99.249','185.226.181.19'}),
      policy.todnames({'bbs.','chan.','cyb.','dyn.','epic.','geek.','gopher.',
                       'indy.','libre.','neo.','null.','o.','oss.','oz.',
                       'parody.','pirate.','free.','bazar.','coin.','emc.',
                       'lib.','fur.','bit.','ku.','te.','ti.','uu.'})
    )
  )
  -- апстрим → в DoT-хаб
  policy.add(policy.all(policy.FORWARD({'127.0.0.1@53'})))

elseif string.match(systemd_instance, '^4') then
  -- @4: FULL (чистый), ТОЛЬКО IPv4 → форвард в @1
  net.listen('127.0.0.4', 53, { kind = 'dns', freebind = true })
  user('knot-resolver', 'knot-resolver')
  cache.open(512 * MB, 'lmdb:///var/cache/knot-resolver/4')
  modules = { 'hints > iterate', 'stats', 'predict' }
  net.bufsize(1232)
  net.ipv6 = false
  -- отключаем DNSSEC/EDNS к апстримам
  trust_anchors.remove('.')
  modules.unload('validate'); modules.unload('ta_update')
  modules.unload('ta_signal_query'); modules.unload('ta_sentinel')
  modules.unload('detect_time_skew')
  modules.unload('extended_error'); modules.unload('priming')
  modules.unload('edns_keepalive'); modules.unload('detect_time_jump')
  policy.add(policy.all(policy.FLAGS({'NO_EDNS'})))
  -- «только v4» → пустой ответ на AAAA/HTTPS/SVCB
  policy.add(match_query_type(policy.ANSWER({}, true), kres.type.AAAA))
  policy.add(match_query_type(policy.ANSWER({}, true), kres.type.HTTPS))
  policy.add(match_query_type(policy.ANSWER({}, true), kres.type.SVCB))
  -- апстрим → в DoT-хаб
  policy.add(policy.all(policy.FORWARD({'127.0.0.1@53'})))

else
  panic("Use kresd@1 or kresd@2 or kresd@3 or kresd@4 instance names")
end

-- Uncomment only for debugging or logging DNS requests
--log_level('debug')